{"config":{"indexing":"full","lang":["de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Einf\u00fchrung in Python Inhalte: Kapitel 1: Python: Was ist das? Kapitel 2: Funktionen in Python Kapitel 3: Datenstrukturen Kapitel 4: if-else-Verzweigung Kapitel 5: Schleifen Kapitel 6: Benutzereingaben mit input Kapitel 7: OOP [Notebooks](./n Beispiel-Notebooks Beispiel 1: Einf\u00fchrung in Python Beispiel 2: Funktionen in Python Beispiel 3: Datenstrukturen","title":"Home"},{"location":"#einfuhrung-in-python","text":"","title":"Einf\u00fchrung in Python"},{"location":"#inhalte","text":"Kapitel 1: Python: Was ist das? Kapitel 2: Funktionen in Python Kapitel 3: Datenstrukturen Kapitel 4: if-else-Verzweigung Kapitel 5: Schleifen Kapitel 6: Benutzereingaben mit input Kapitel 7: OOP [Notebooks](./n","title":"Inhalte:"},{"location":"#beispiel-notebooks","text":"Beispiel 1: Einf\u00fchrung in Python Beispiel 2: Funktionen in Python Beispiel 3: Datenstrukturen","title":"Beispiel-Notebooks"},{"location":"chapter1/exercise1/","text":"Aufgaben Achtung: Teste dein Wissen mit den folgenden Assignments. Summe von Zahlen Github Repository Erstelle eine `sum_numbers.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `sum_numbers` , die eine Liste von Zahlen als Argument akzeptiert und die Summe dieser Zahlen zur\u00fcckgibt. Beispiel: sum_numbers([1, 2, 3, 4]) # Sollte 10 zur\u00fcckgeben sum_numbers([]) # Sollte 0 zur\u00fcckgeben Fl\u00e4cheninhalt eines Kreises Github Repository Erstelle eine `circle_area.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `circle_area` , die den Radius als Argument akzeptiert und den Fl\u00e4cheninhalt des Kreises zur\u00fcckgibt. Verwende die Formel A = \u03c0 * r^2 Beispiel: circle_area(3) # Sollte 28.27 zur\u00fcckgeben circle_area(0) # Sollte 0 zur\u00fcckgeben Zeichenl\u00e4nge eines Strings Github Repository Erstelle eine `string_length.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `string_length` , die einen String als Argument akzeptiert und die Anzahl der Zeichen zur\u00fcckgibt. Beispiel: circle_area(3) # Sollte 28.27 zur\u00fcckgeben circle_area(0) # Sollte 0 zur\u00fcckgeben","title":"Aufgaben"},{"location":"chapter1/exercise1/#aufgaben","text":"Achtung: Teste dein Wissen mit den folgenden Assignments.","title":"Aufgaben"},{"location":"chapter1/exercise1/#summe-von-zahlen","text":"Github Repository Erstelle eine `sum_numbers.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `sum_numbers` , die eine Liste von Zahlen als Argument akzeptiert und die Summe dieser Zahlen zur\u00fcckgibt. Beispiel: sum_numbers([1, 2, 3, 4]) # Sollte 10 zur\u00fcckgeben sum_numbers([]) # Sollte 0 zur\u00fcckgeben","title":"Summe von Zahlen"},{"location":"chapter1/exercise1/#flacheninhalt-eines-kreises","text":"Github Repository Erstelle eine `circle_area.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `circle_area` , die den Radius als Argument akzeptiert und den Fl\u00e4cheninhalt des Kreises zur\u00fcckgibt. Verwende die Formel A = \u03c0 * r^2 Beispiel: circle_area(3) # Sollte 28.27 zur\u00fcckgeben circle_area(0) # Sollte 0 zur\u00fcckgeben","title":"Fl\u00e4cheninhalt eines Kreises"},{"location":"chapter1/exercise1/#zeichenlange-eines-strings","text":"Github Repository Erstelle eine `string_length.py` Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion `string_length` , die einen String als Argument akzeptiert und die Anzahl der Zeichen zur\u00fcckgibt. Beispiel: circle_area(3) # Sollte 28.27 zur\u00fcckgeben circle_area(0) # Sollte 0 zur\u00fcckgeben","title":"Zeichenl\u00e4nge eines Strings"},{"location":"chapter1/intro1/","text":"Kapitel 1 Pr\u00e4sentation: Python Grundlagen Zusammenfassung Was ist Python? Python ist eine hochrangige, interpretierte Programmiersprache, die von Guido van Rossum in den sp\u00e4ten 1980er Jahren entwickelt wurde. Seitdem hat sie sich als eine der beliebtesten Programmiersprachen etabliert. Python ist bekannt f\u00fcr seine einfache und leicht lesbare Syntax, was sie besonders einsteigerfreundlich macht. Die Vielseitigkeit von Python zeigt sich in der breiten Palette an Anwendungsbereichen: von der Webentwicklung \u00fcber Datenanalyse bis hin zu maschinellem Lernen und Automatisierung. Vorteile von Python Einfache Lesbarkeit und \u00fcbersichtliche Syntax : Die Syntax von Python ist intuitiv und klar strukturiert, was das Schreiben und Verstehen von Code erleichtert. Umfangreiche Standardbibliothek : Python bietet eine F\u00fclle von integrierten Funktionen und Modulen, die Entwicklern viel Arbeit abnehmen. Plattformunabh\u00e4ngig : Python l\u00e4uft auf verschiedenen Betriebssystemen wie Windows, macOS und Linux, was es flexibel und universell einsetzbar macht. Aktive Entwicklergemeinschaft : Python wird kontinuierlich weiterentwickelt, und die Community bietet reichlich Unterst\u00fctzung, Tutorials und L\u00f6sungen f\u00fcr Probleme. Schnelle Prototypenentwicklung : Durch die Einfachheit der Sprache lassen sich Projekte schneller starten und iterativ weiterentwickeln. Beispiel: # Ein einfaches \"Hello, World!\"-Programm in Python print(\"Hello, World!\") Herausforderungen von Python Etwas langsamer, da es interpretiert wird : Im Vergleich zu kompilierten Sprachen wie C oder C++ ist Python langsamer, da der Code w\u00e4hrend der Ausf\u00fchrung interpretiert wird. Nicht ideal f\u00fcr rechenintensive Aufgaben : Wenn hohe Rechenleistung gefragt ist, kann Python im Vergleich zu spezialisierten Sprachen Nachteile haben. Problematisch bei eingebetteten Systemen oder speicherintensiven Anwendungen : Python ist nicht die beste Wahl, wenn es um die Entwicklung von Software f\u00fcr eingebettete Systeme oder um hochspezialisierte speicherintensive Aufgaben geht. Kompatibilit\u00e4tsprobleme zwischen Python 2 und Python 3 : Einige \u00e4ltere Python-Projekte laufen immer noch auf Python 2, was Kompatibilit\u00e4tsprobleme verursachen kann, da Python 3 erhebliche \u00c4nderungen eingef\u00fchrt hat. Anwendungsbereiche von Python Python wird in vielen Bereichen eingesetzt: Webentwicklung : Mit Frameworks wie Django oder Flask lassen sich Webanwendungen schnell entwickeln. Datenanalyse und Visualisierung : Bibliotheken wie Pandas, NumPy und Matplotlib machen Python zur ersten Wahl f\u00fcr Datenwissenschaftler. Maschinelles Lernen und K\u00fcnstliche Intelligenz : TensorFlow, Keras und PyTorch sind beliebte Bibliotheken, um maschinelle Lernmodelle zu entwickeln. Automatisierung : Python eignet sich hervorragend, um repetitive Aufgaben zu automatisieren, sei es im B\u00fcroalltag oder bei der Systemadministration. Beispiel: # Eine einfache Webanfrage mit Python import requests response = requests.get(\"https://www.example.com\") print(response.status_code) Primitive Datentypen in Python Python bietet mehrere grundlegende Datentypen: Integer (int) : Ganze Zahlen, z. B. 1, 42, -5. Float (float) : Gleitkommazahlen, z. B. 3.14, -0.001. String (str) : Zeichenketten, z. B. \"Hallo\", \"Python\". Boolean (bool) : Wahrheitswerte, True oder False. None : Spezielle Konstante f\u00fcr \"nichts\", wird oft als Platzhalter verwendet. Beispiel: # Beispiel f\u00fcr die Verwendung primitiver Datentypen x = 10 # Integer y = 3.14 # Float name = \"Alice\" # String is_valid = True # Boolean nothing = None # None print(x, y, name, is_valid, nothing) \u00dcberpr\u00fcfe dein Wissen! Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"Theorie"},{"location":"chapter1/intro1/#kapitel-1","text":"","title":"Kapitel 1"},{"location":"chapter1/intro1/#prasentation-python-grundlagen","text":"Zusammenfassung","title":"Pr\u00e4sentation: Python Grundlagen"},{"location":"chapter1/intro1/#uberprufe-dein-wissen","text":"Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"\u00dcberpr\u00fcfe dein Wissen!"},{"location":"chapter2/exercise2/","text":"Aufgaben Achtung: Teste dein Wissen mit den folgenden Assignments. Begr\u00fc\u00dfung Github Repository Erstelle eine greet.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion greet , die einen Namen als Argument akzeptiert und eine personalisierte Begr\u00fc\u00dfung in der Form von \"Hallo, [Name]!\" zur\u00fcckgibt. Beispiel: greet(\"Max\") # Sollte \"Hallo, Max!\" zur\u00fcckgeben greet(\"Anna\") # Sollte \"Hallo, Anna!\" zur\u00fcckgeben Berechnung des Dreiecksumfangs Github Repository Erstelle eine triangle_perimeter.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion triangle_perimeter , die drei Seitenl\u00e4ngen eines Dreiecks als Argumente akzeptiert und den Umfang des Dreiecks berechnet. Beispiel: triangle_perimeter(3, 4, 5) # Sollte 12 zur\u00fcckgeben triangle_perimeter(1, 1, 1) # Sollte 3 zur\u00fcckgeben Minimum aus 3 Zahlen finden Github Repository Erstelle eine min_of_three.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion min_of_three , die drei Zahlen als Argumente akzeptiert und die kleinste von ihnen zur\u00fcckgibt. Beispiel: min_of_three(3, 4, 5) # Sollte 3 zur\u00fcckgeben min_of_three(10, 2, 8) # Sollte 2 zur\u00fcckgeben","title":"Aufgaben"},{"location":"chapter2/exercise2/#aufgaben","text":"Achtung: Teste dein Wissen mit den folgenden Assignments.","title":"Aufgaben"},{"location":"chapter2/exercise2/#begruung","text":"Github Repository Erstelle eine greet.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion greet , die einen Namen als Argument akzeptiert und eine personalisierte Begr\u00fc\u00dfung in der Form von \"Hallo, [Name]!\" zur\u00fcckgibt. Beispiel: greet(\"Max\") # Sollte \"Hallo, Max!\" zur\u00fcckgeben greet(\"Anna\") # Sollte \"Hallo, Anna!\" zur\u00fcckgeben","title":"Begr\u00fc\u00dfung"},{"location":"chapter2/exercise2/#berechnung-des-dreiecksumfangs","text":"Github Repository Erstelle eine triangle_perimeter.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion triangle_perimeter , die drei Seitenl\u00e4ngen eines Dreiecks als Argumente akzeptiert und den Umfang des Dreiecks berechnet. Beispiel: triangle_perimeter(3, 4, 5) # Sollte 12 zur\u00fcckgeben triangle_perimeter(1, 1, 1) # Sollte 3 zur\u00fcckgeben","title":"Berechnung des Dreiecksumfangs"},{"location":"chapter2/exercise2/#minimum-aus-3-zahlen-finden","text":"Github Repository Erstelle eine min_of_three.py Datei im Root-Verzeichnis Deines Repositories. Schreibe eine Funktion min_of_three , die drei Zahlen als Argumente akzeptiert und die kleinste von ihnen zur\u00fcckgibt. Beispiel: min_of_three(3, 4, 5) # Sollte 3 zur\u00fcckgeben min_of_three(10, 2, 8) # Sollte 2 zur\u00fcckgeben","title":"Minimum aus 3 Zahlen finden"},{"location":"chapter2/intro2/","text":"Kapitel 2 Pr\u00e4sentation: Funktionen in Python Zusammenfassung Was sind Funktionen? Funktionen sind grundlegende Bausteine in jeder Programmiersprache, einschlie\u00dflich Python. Sie sind wiederverwendbare Abschnitte von Code, die eine spezifische Aufgabe ausf\u00fchren. Durch die Verwendung von Funktionen kannst du Code modularer und strukturierter gestalten. Das bedeutet, dass du bestimmte Aufgaben in einer Funktion definierst und diese immer dann aufrufst, wenn du sie ben\u00f6tigst, anstatt denselben Code mehrfach zu schreiben. Funktionen sind besonders n\u00fctzlich, weil sie es erm\u00f6glichen, Eingaben (Parameter) zu verarbeiten und Ausgaben (R\u00fcckgabewerte) zu liefern, wodurch sie flexibel und vielseitig einsetzbar sind. Eine einfache Funktion definieren In Python wird eine Funktion mit dem Schl\u00fcsselwort def eingef\u00fchrt. Dieses Schl\u00fcsselwort signalisiert, dass eine neue Funktion definiert wird. Danach folgt der Name der Funktion, gefolgt von runden Klammern. Falls die Funktion Parameter erwartet, werden diese innerhalb der Klammern angegeben. Der eigentliche Funktionscode, der ausgef\u00fchrt wird, wenn die Funktion aufgerufen wird, befindet sich im sogenannten Funktionsk\u00f6rper. Dieser ist durch Einr\u00fcckung (Indentation) gekennzeichnet, was in Python ein wichtiger Bestandteil der Syntax ist. def sag_hallo(): print(\"Hallo, Welt!\") Funktion aufrufen Nachdem du eine Funktion definiert hast, kannst du sie verwenden, indem du sie aufrufst. Das machst du, indem du den Namen der Funktion schreibst, gefolgt von runden Klammern. Wenn die Funktion Parameter hat, gibst du die entsprechenden Werte innerhalb der Klammern an. Ohne Parameter sind die Klammern leer. Hier ein Beispiel f\u00fcr den Aufruf der Funktion sag_hallo : sag_hallo() # Ausgabe: Hallo, Welt! Funktionen mit Parametern Um eine Funktion flexibler und dynamischer zu gestalten, kannst du Parameter verwenden. Parameter sind Eingabewerte, die du an eine Funktion \u00fcbergibst, damit sie unterschiedliche Aufgaben ausf\u00fchren kann, je nachdem, welche Werte du \u00fcbergibst. Diese Parameter werden in den runden Klammern bei der Funktionsdefinition angegeben. Zum Beispiel kann eine Funktion eine personalisierte Begr\u00fc\u00dfung ausgeben, indem du ihr einen Namen als Parameter \u00fcbergibst: def begruessung(name): print(f\"Hallo, {name}!\") begruessung(\"Alice\") # Ausgabe: Hallo, Alice! begruessung(\"Bob\") # Ausgabe: Hallo, Bob! R\u00fcckgabewerte von Funktionen Manchmal reicht es nicht aus, dass eine Funktion nur etwas auf dem Bildschirm ausgibt. Stattdessen m\u00f6chtest du vielleicht, dass die Funktion einen Wert zur\u00fcckgibt, den du weiterverwenden kannst. Dazu nutzt du das Schl\u00fcsselwort return , gefolgt vom Wert, den die Funktion zur\u00fcckgeben soll. Im folgenden Beispiel gibt die Funktion addiere die Summe zweier Zahlen zur\u00fcck: def addiere(a, b): return a + b ergebnis = addiere(5, 3) print(ergebnis) # Ausgabe: 8 Funktionen mit Standardparametern In Python k\u00f6nnen Funktionen sogenannte Standardwerte f\u00fcr Parameter haben. Das bedeutet, wenn du keinen Wert f\u00fcr einen bestimmten Parameter angibst, wird automatisch der Standardwert verwendet. Dies ist n\u00fctzlich, um Funktionen noch flexibler zu gestalten, ohne dass der Benutzer immer alle Parameter angeben muss. Hier ein Beispiel f\u00fcr eine Funktion, die einen Standardwert f\u00fcr den Parameter name hat: def begruessung(name=\"Gast\"): print(f\"Hallo, {name}!\") begruessung() # Ausgabe: Hallo, Gast! begruessung(\"Charlie\") # Ausgabe: Hallo, Charlie! Variablenanzahl von Argumenten Manchmal m\u00f6chtest du eine Funktion schreiben, die eine unbestimmte Anzahl von Argumenten akzeptieren kann. Dies ist besonders praktisch, wenn du nicht genau wei\u00dft, wie viele Werte \u00fcbergeben werden. In Python kannst du dies mit *args erreichen, welches eine beliebige Anzahl von Argumenten in Form eines Tupels sammelt. Im Beispiel unten summiert die Funktion summe eine beliebige Anzahl von Zahlen: def summe(*zahlen): return sum(zahlen) ergebnis = summe(1, 2, 3, 4) print(ergebnis) # Ausgabe: 10 Fazit Funktionen sind unverzichtbare Werkzeuge in der Programmierung, insbesondere in Python. Sie helfen dabei, den Code zu strukturieren, modular zu gestalten und wiederverwendbar zu machen. Mit Parametern, R\u00fcckgabewerten und der M\u00f6glichkeit, eine flexible Anzahl von Argumenten zu akzeptieren, bieten Funktionen eine hohe Flexibilit\u00e4t und machen deinen Code effizienter. \u00dcbung Schreibe eine Funktion multipliziere(a, b) , die zwei Zahlen multipliziert und das Ergebnis zur\u00fcckgibt. Rufe diese Funktion mit verschiedenen Werten auf und gib die Ergebnisse auf dem Bildschirm aus. Dies wird dir helfen, das Konzept von Funktionen und R\u00fcckgabewerten weiter zu festigen. \u00dcberpr\u00fcfe dein Wissen! Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"Theorie"},{"location":"chapter2/intro2/#kapitel-2","text":"","title":"Kapitel 2"},{"location":"chapter2/intro2/#prasentation-funktionen-in-python","text":"Zusammenfassung","title":"Pr\u00e4sentation: Funktionen in Python"},{"location":"chapter2/intro2/#uberprufe-dein-wissen","text":"Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"\u00dcberpr\u00fcfe dein Wissen!"},{"location":"chapter3/exercise3/","text":"","title":"Aufgaben"},{"location":"chapter3/intro3/","text":"Kapitel 2 Pr\u00e4sentation: Funktionen in Python Zusammenfassung \u00dcberpr\u00fcfe dein Wissen! Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"Theorie"},{"location":"chapter3/intro3/#kapitel-2","text":"","title":"Kapitel 2"},{"location":"chapter3/intro3/#prasentation-funktionen-in-python","text":"Zusammenfassung","title":"Pr\u00e4sentation: Funktionen in Python"},{"location":"chapter3/intro3/#uberprufe-dein-wissen","text":"Achtung: Teste dein Wissen im Thema Python Grundlagen, indem du die Aufgaben akzeptierst.","title":"\u00dcberpr\u00fcfe dein Wissen!"},{"location":"chapter4/exercise4/","text":"","title":"Aufgaben"},{"location":"chapter4/intro4/","text":"","title":"Theorie"},{"location":"chapter5/exercise5/","text":"","title":"Aufgaben"},{"location":"chapter5/intro5/","text":"","title":"Theorie"},{"location":"chapter6/exercise6/","text":"","title":"Aufgaben"},{"location":"chapter6/intro6/","text":"","title":"Theorie"},{"location":"chapter7/exercise7/","text":"","title":"Aufgaben"},{"location":"chapter7/intro7/","text":"","title":"Theorie"}]}